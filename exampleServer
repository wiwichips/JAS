#!/bin/bash

# in his exmaple there are two cpus 
numCPU=2
idle1=1
idle2=1

status=empty

currCPU=-1

pid1=-1
pid2=-1

## functions
function readStatus {
  # this is used when getting teh status of a speciic processor
  read status < "/tmp/processor-${currCPU}-status-${USER}-fifo"
  
}

function updateIdleArray {
  # this is called when any processor finishes its job, can't tell which one tho
  echo "job is done"
  
  currCPU=1
  kill -10 $pid1
  sleep 0.1
  idle1=$status

  currCPU=2
  kill -10 $pid2
  sleep 0.1
  idle2=$status
  
}

## traps

# delete fifos on close
trap "rm -f /tmp/processor*; pkill mgProcessor; exit 0" 0 1 2 15

# read status
trap readStatus SIGUSR1

# tells the server some job is done, so update the job board for openings
trap updateIdleArray SIGUSR2

## main

# create 2 read and 2 write pipes
mkfifo "/tmp/processor-1-${USER}-fifo"
mkfifo "/tmp/processor-2-${USER}-fifo"
mkfifo "/tmp/processor-1-status-${USER}-fifo"
mkfifo "/tmp/processor-2-status-${USER}-fifo"

# call two instances of mgProcessor
./mgProcessor 1 $$ &
./mgProcessor 2 $$ &

# grab the PID from each process
read pid1 < "/tmp/processor-1-status-${USER}-fifo"
read pid2 < "/tmp/processor-2-status-${USER}-fifo"

# test if its working so far
echo "(${pid1} ${pid2})"

## send a job

# find the first idle cpu - they both are, so go with first one

if [ "$idle1" = "1" ]
then
  idle1=0
  echo "./timedCountdown" > "/tmp/processor-1-${USER}-fifo"
elif [ "$idle2" = '1' ]
then
  idle2=0
  echo "./timedCountdown" > "/tmp/processor-2-${USER}-fifo"
else 
  echo "~) 1 - no more idle processors - throwing job out"
fi


if [ "$idle1" = '1' ]
then
  idle1=0
  echo "pwd" > "/tmp/processor-1-${USER}-fifo"
elif [ "$idle2" = '1' ]
then
  idle2=0
  echo "pwd" > "/tmp/processor-2-${USER}-fifo"
else 
  echo "~) 2 - no more idle processors - throwing job out"
fi


if [ "$idle1" = '1' ]
then
  idle1=0
  echo "pwd" > "/tmp/processor-1-${USER}-fifo"
elif [ "$idle2" = '1' ]
then
  idle2=0
  echo "pwd" > "/tmp/processor-2-${USER}-fifo"
else 
  echo "~) 3 - no more idle processors - throwing job out"
fi

sleep 2

if [ "$idle1" = '1' ]
then
  idle1=0
  echo "neofetch" > "/tmp/processor-1-${USER}-fifo"
elif [ "$idle2" = '1' ]
then
  idle2=0
  echo "neofetch" > "/tmp/processor-2-${USER}-fifo"
else 
  echo "~) 4 - no more idle processors - throwing job out"
fi

sleep 4

if [ "$idle1" = '1' ]
then
  idle1=0
  echo "ps" > "/tmp/processor-1-${USER}-fifo"
elif [ "$idle2" = '1' ]
then
  idle2=0
  echo "ps" > "/tmp/processor-2-${USER}-fifo"
else 
  echo "~) 5 - no more idle processors - throwing job out"
fi


sleep 8.2

printf "exiting"
sleep 0.3
printf "."
sleep 0.3
printf "."
sleep 0.3
echo "."
