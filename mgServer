#!/bin/bash

# job pipe
FIFO_S="/tmp/server-${USER}-fifo"
FIFO_P="/tmp/processor-${USER}-fifo"
FIFOS=()

# cpu stuff
numCPU="$(getconf _NPROCESSORS_ONLN)"
idle=()

# server directory
DIRECTORY="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# job queue
jobQueue=()
numJobs=0
numDone=0

# used to shut down the loop when ^C
isOn=1

# usage - addToQueue "job"
function addToQ {
	jobQueue+=("$@")
  numJobs=$((numJobs+1))
}

# usage - pass the array by name for first index, then pop
function popQ {
  if (( numJobs > 0 )); then
    numJobs=$((numJobs - 1))
    newArray=()
    for j in $(seq $numJobs); do
      newArray+=(${jobQueue[$j]})
    done
    unset jobQueue
    jobQueue=(${newArray[@]})
  fi
}

function updateTotal {
  numDone=$((numDone+1))
}

function cleanup {
  if [ "$isOn" = '1' ]; then
    # end the loop getting input
    isOn=0
    printf "Shutting down"
    sleep 0.1
    printf "."
    sleep 0.2
    printf "."
    sleep 0.2
    for i in $(seq $numCPU); do
      # rm -f ${FIFO_P}-cpuID${i}
      echo "exit" > ${FIFO_P}-cpuID${i} &
    done
    rm -f $FIFO_S
    rm -f "${FIFO_P}"
    printf ".\n"
  fi
  exit 0
}

function sendJob {
  cpuID=$1
  job=$2
  echo "$job" > ${FIFO_P}-cpuID${1} &
}

function assignJob {
  if (( numJobs > 0 )); then # IF THERE'S AT LEAST ONE JOB IN THE JQ
    for i in $(seq $numCPU); do
      if [ "${idle[$i]}" = "1" ]; then
        # echo assign job to cpu $i
        idle[$i]=0
        job=$jobQueue
        popQ
        sendJob $i "$job"
        break
      fi
    done
  fi
}

function status {
  echo "There are $numCPU processors"
  echo "$numDone jobs have been completed"
  for i in $(seq $numCPU); do
    if [ "${idle[$i]}" = "0" ]
    then
      printf "$i: busy\n"
    else
      printf "$i: idle\n"
    fi
	done
}

function clearCPU {
  idle[$1]=1
  updateTotal
}

# create a fifo for sending status back to the server
umask 0077
mkfifo "${FIFO_P}"
mkfifo $FIFO_S

# make required loop statements
for i in $(seq $numCPU); do
  # set each cpu to idle
  idle[$i]=1

  # create a new fifo
  FIFOS[$i]="$FIFO_P$i"
  mkfifo ${FIFO_P}-cpuID${i}
  "$DIRECTORY/mgProcessor" $i $$ &
done

# traps
trap cleanup 0 1 2 15 SIGINT

while [ "$isOn" = '1' ]; do
  sleep 0.3 # 😏
  # read user input from the submit pipe
  submit="$(python3 $DIRECTORY/fifoReader.py $FIFO_S 2>/dev/null)"
  if [ "$submit" = 'exit' ]; then
    exit 0
    break
	
  elif [ "$submit" = 'status' ]; then
    status

  elif [ "$submit" != "" ]; then
    addToQ "${submit}"
  fi

  # read from the done jobs queue
  jobDone="$(python3 $DIRECTORY/fifoReader.py $FIFO_P 2>/dev/null)"
  if [ "$jobDone" != "" ]; then
    clearCPU $jobDone
  fi

  # assign any jobs to open processors if possible
  assignJob
done
